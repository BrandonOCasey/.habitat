#!/bin/sh

# TODO:

# To Brainstorm
# * Can we pull down a single file for plugins rather than a folder
#

# MUST DO:
# * write unit tests
# * habitat_manage
# * habitat_update
# * habitat_first_time_setup
# * exit on error and run cleanup
# * check git return codes

# CAN DO:
# * plugin specific args
# * plugin specific config settings
# * warn about updates
# * ask user if they want to update and show code
# * support quotes variables in config?
# * allow --save from any arg
# * allow --debug from any arg

##
# habitat_error(message*)
# print messages to STDERR
#
# message - any number of messages to print to STDERR
##
function habitat_error() {
    while [ $# -gt 0 ]; do
        local message="$1"; shift
        echo "Error: $message" 1>&2
    done
}

##
# habitat_debug(message*)
# print file descriptor 3 when debug is set. We print to
# and create a thrird file descriptor so that we wont interfere
# with stdout capture of other functions while we are here.
#
# message - any number of messages to print
##
function habitat_debug() {
    if [ -n "$habitat_debug_output" ]; then
        exec 3>&1
        while [ $# -gt 0 ]; do
            local message="$1"; shift
            echo "Debug: $message" 1>&3
        done
        exec 3>&-
    fi
}

##
# habitat_cleanup()
# remove all function/variables from the environment that start with habitat_
##
function habitat_cleanup() {
    local func
    while read -r func; do
        habitat_debug "Unsetting function $func"
        if [ "$func" != "habitat_cleanup" ] &&  [ "$func" != "habitat_debug" ]; then
            unset -f "$func"
        fi
    done <<< "$(declare -F | sed -e 's~declare -f ~~g' | grep -E "^habitat_")"

    local var
    while read -r var; do
        habitat_debug "Unsetting variable $var"
        unset "$var"
    done <<< "$((set -o posix ; set) | sed -e 's~=.*~~' | grep -E "^habitat_")"

    unset -f "habitat_cleanup"
    unset -f "habitat_debug"
}


##
# habitat_setup()
# source run, setup, and usage functions from plugins
##
function habitat_setup() {
    local author
    local plugin
    for author in "$habitat_plugins_dir/"*; do
        # as this would normally be a long dir rather than just the author name
        author="$(basename "$author")"
        if [ "$author" = "*"  ]; then
            habitat_debug "Found no authors in plugins"
            break
        fi
        for plugin in "$habitat_plugins_dir/$author/"*; do
            plugin="$(basename "$plugin")"
            if [ "$plugin" = "*"  ]; then
                habitat_debug "Found no plugins for author $author"
                break
            elif [ ! -f "$habitat_plugins_dir/$author/$plugin/habit" ]; then
                habitat_error "Found no habit file for plugin $author/$plugin"
                break
            fi
            habitat_debug "Going to source plugin $author/$plugin"
            . "$habitat_plugins_dir/$author/$plugin/habit"
            if [ -n "$habitat_plugin_list" ]; then
                habitat_plugin_list="$habitat_plugin_list "
            fi
            habitat_plugin_list="${habitat_plugin_list}${author}/${plugin}"
        done
    done
}


##
# habitat_run()
# run plugin setup and run functions
##
function habitat_run() {
    local plugin
    local plugin_underscore
    for plugin in $habitat_plugin_list; do
        plugin_underscore="$(echo "$plugin" | sed 's~/~_~')"
        habitat_debug "Going to run habitat_${plugin_underscore}_setup()"
        if type -t "habitat_${plugin_underscore}_setup"; then
            :
            #habitat_${plugin_underscore}_setup
        else
            habitat_error "$plugin does not have a setup function!!"
        fi
    done
    for plugin in $habitat_plugin_list; do
        plugin_underscore="$(echo "$plugin" | sed 's~/~_~')"
        habitat_debug "Going to run habitat_${plugin_underscore}_setup()"
        if type -t "habitat_${plugin_underscore}_run"; then
            :
            #habitat_${plugin_underscore}_run
        else
            habitat_error "$plugin does not have a run function"
        fi
    done
}

##
# habitat_stub(plugin)
# stub out a new plugin
#
# plugin - 'author/repo' of the github url
##
function habitat_stub() {

    if [ -z "$1" ]; then
        habitat_error "Please pass in author/repo"
        return
    fi
    local plugin="$1"
    local name="$(echo "$plugin" | sed 's~/~_~')"
    local dir="$habitat_plugins_dir/$plugin"

    if [ -d "$dir" ]; then
        habitat_error "$plugin already exists!!"
    fi

    mkdir -p "$dir"

    local stub_contents="#!/bin/sh
function habitat_${name}_setup() {
    :
}

function habitat_${name}_run() {
    :
}

function habitat_${name}_usage() {
    :
}

function habitat_${name}_version() {
    echo '1.0.0'
}

"

    habitat_debug "Creating stub in $dir/habit"
    habitat_debug "With Contents" "$stub_contents"
    echo "$stub_contents" > "$dir/habit"

}



##
# habitat_check_update(plugin)
# check wether their are updates for the habitat cli or plugins
##
function habitat_check_update() {
    :
}


##
# habitat_usage(plugin)
# show usage information
#
# plugin - 'author/repo' of plugin tp show usage for
##
function habitat_usage() {
    if [ -z "$1" ]; then
        echo
        echo "  . habitat <args>"
        echo
        echo "  add       add (a) plugin(s). use --save write a config change"
        echo "  rm        remove (a) plugin(s). use --save to write a config change"
        echo "  stub      stub a plugin in ${habitat_plugins_dir}. ex: stub author/plugin_name"
        echo "  help      show this help menu or plugin help. ex: help author/plugin_name"
    #    echo "  ls        show installed plugins"
    #    echo "  update    go through a plugin update progress"
    #    echo "  install   install plugins based upon config file"
    #    echo "  --debug   use with any other command to turn on debug output"
        echo
    else
        local plugin="$1"; shift
        local name="$(echo "$plugin" | sed 's~/~_~')"
        if type -t "habitat_${name}_usage"; then
            habitat_${name}_usage
        else
            habitat_error "$plugin is not installed or has no usage"
        fi
    fi
}


##
# habitat_add(plugin*)
# add plugins, pass --save as plugin variable to save additions to config
#
# plugin - any number of 'author/repo' to add
##
function habitat_add() {
    while [ $# -gt 0 ] ; do
        local plugin="$1"; shift
        if [ -z "$plugin" ]; then
            continue
        fi
        local dir="$habitat_plugins_dir/$plugin"
        if [ -d "$dir"  ]; then
            habitat_error "Plugin $plugin appears to already be installed"
            continue
        fi

        git clone "https://github.com/$plugin" "$dir"
        if [ ! -f "$habitat_plugins_dir/$plugin/habit" ]; then
            habitat_error "Plugin $plugin does not contain a habit file removing"
            if [ -d "$dir" ]; then
                rm -rf "$dir"
            fi
            continue;
        fi
        echo "Plugin $plugin installed successfully"
        if [ -n "$habitat_save_to_config" ]; then
            local plugins="$(habitat_get_config "habitat_plugins_dir")"
            if [ -n "$plugins" ]; then
                plugins="$plugins "
            fi
            habitat_write_config "habitat_plugins_dir" "${plugins}${plugin}"
        fi
    done
}

##
# habitat_rm(plugin*)
# remove plugins, pass --save as plugin variable to save removals to config
#
# plugin - any number of 'author/repo' to remove
##
function habitat_rm() {
    while [ $# -gt 0 ] ; do
        local plugin="$1"; shift;
        if [ -z "$plugin" ]; then
            continue
        fi
        local dir="$habitat_plugins_dir/$plugin"
        if [ ! -d "$dir" ]; then
            habitat_error "Plugin $plugin does not exist"
            continue
        fi
        rm -rf "$dir"
        echo "Successfully Removed plugin $plugin"
        if [ -n "$habitat_save_to_config" ]; then
            local plugins="$(habitat_get_config "habitat_plugins_dir" | sed "s~$plugin~~")"
            habitat_write_config "habitat_plugins_dir" "${plugins}${plugin}"
        fi
    done
}

##
# habitat_read_config(key)
# read a value from the config given its key
#
# key - key to grab the value of
##
function habitat_read_config() {
    local key="$1"; shift
    result="$(cat "$habitat_config_file" | grep "$key" | sed "s~$key=~~")"
    if [ -z "$result" ]; then
        result="$(echo "")"
    fi
    echo "$result"
    habitat_debug "Found that $key was $result in config file"
}

##
# habitat_write_config(key, val)
# write a key value pair to the config file
#
# key - key to set
# val - value to set the key to
##
function habitat_write_config() {
    local key="$1"; shift
    local val="$1"; shift
    if [ -z "$key" ]; then
        return 1
    fi
    if [ -n "$( echo "$habitat_config_file" | grep "$key=")" ]; then
        habitat_debug "Found that $key already exists going to set to $val"
        cat "$habitat_config_file" | sed "s~$key=.*~$key=$val" > "$habitat_config_file"
    else
        habitat_debug "Found that $key does not exist appending to config as $val"
        echo "$key=$val" > $habitat_config_file
    fi
}


##
# habitat_manage()
# add plugins based on config file, and source them
##
function habitat_manage() {
    :
}


##
# habitat_update()
# update all installed plugins with .git directories
##
function habitat_update() {
    local author
    local plugin
    for author in "$habitat_plugins_dir/"*; do
        for plugin in "$author/"*; do
            if [ -d "$plugin/.git" ]; then
                habitat_debug "Going to update $plugin"
                # git pull "$plugin"
                # . $plugin/habit
            fi
        done
    done
}


##
# habitat_update()
# check if the user wants certain first_time functionality
##
function habitat_first_time_setup() {
    # create config and default values
    :
}


#
#
#
# MAIN
#
#
#


# Requirements
if [ -z "$HOME" ]; then
    habitat_error "HOME must be defined in your environment to use habitat"
    return 1
fi

if ! command -v git > /dev/null; then
    habitat_error "git must be installed to use habitat!!"
    return 1
fi


# defines
habitat_base_dir="$HOME/Projects/.habitat"
habitat_plugins_dir="$habitat_base_dir/plugins"
habitat_cli_file="$habitat_base_dir/habitat"
habitat_dotfiles_dir="$habitat_base_dir/dotfiles"
habitat_config_file="$habitat_base_dir/habitatrc"

# Ever Changing Data
habitat_start_seconds="$(date +%s)"
habitat_save_to_config=""
habitat_version="1.0.0"
habitat_plugin_list=""

alias habitat=". $habitat_cli_file"

if [ ! -f "$habitat_config_file" ]; then
    habitat_first_time_setup
fi

habitat_debug_output="$(habitat_read_config "habitat_debug_output")"
habitat_debug "habitat debug output is on!"
habitat_setup

# user passed in args
if [ -n "$1" ]; then
    action="$1"; shift
    if [ "$1" = "--save" ]; then
        echo "Will write changes to config file where possible"
        habitat_save_to_config="TRUE"
        shift;
    fi
    if [ "$action" = "help" ]; then
        habitat_usage "$@"
    elif [ "$action" = "add" ]; then
        habitat_add "$@"
    elif [ "$action" = "rm" ]; then
        habitat_rm "$@"
    elif [ "$action" = "stub" ]; then
        habitat_stub "$@"
    elif [ "$action" = "update" ]; then
        habitat_update"$@"
    else
        habitat_error "Unknown action ${action}. Use help for usage"
    fi
else
    habitat_update
    habitat_manage
    habitat_run
fi

# Cleanup our internal functions
habitat_cleanup
