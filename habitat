#! /usr/bin/env sh

# Define Colors: Stolen From https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
#if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
#    export TERM="gnome-256color"
#elif infocmp xterm-256color >/dev/null 2>&1; then
#    export TERM="xterm-256color"
#fi

RED="\e[0;31m"
ORANGE="\033[1;33m"
YELLOW="\e[0;33m"
GREEN="\033[1;32m"
BLUE=""
LIGHT_BLUE=""
PURPLE="\033[1;35m"
PINK=""
WHITE="\033[1;37m"
GRAY=""
GREY=""
BLACK="\e[0;30m"
BROWN=""
CYAN="\e[0;36m"
# Extras
BOLD=""
RESET="\033[m"
DIM=""

if command -v 'tput' > /dev/null; then
    if [ "$(tput colors)" -ge 256 ]; then
        RED="$(tput setaf 196)"
        ORANGE="$(tput setaf 202)"
        YELLOW="$(tput setaf 226)"
        GREEN="$(tput setaf 34)"
        BLUE="$(tput setaf 21)"
        LIGHT_BLUE="$(tput setaf 51)"
        PURPLE="$(tput setaf 58)"
        PINK="$(tput setaf 171)"
        WHITE="$(tput setaf 255)"
        GRAY="$(tput setaf 244)"
        GREY="$(tput setaf 244)"
        BLACK="$(tput setaf 256)"
        BROWN="$(tput setaf 130)"
        CYAN="$(tput setaf 39)"
    else
        RED="$(tput setaf 1)"
        ORANGE=""
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        BLUE="$(tput setaf 4)"
        LIGHT_BLUE=""
        PURPLE=""
        PINK="$(tput setaf 5)"
        WHITE="$(tput setaf 7)"
        GRAY=""
        GREY=""
        BLACK="$(tput setaf 0)"
        BROWN=""
        CYAN="$(tput setaf 6)"
    fi
    BOLD="$(tput bold)"
    RESET="$(tput sgr0)"
    DIM="$(tput dim)"
fi


function habitat_pre_setup() {
    # Base Folders
    habitat_base="$HOME/.habitat"
    habitat_cli="$habitat_base/habitat"
    habitat_storage="$habitat_base/storage"
    habitat_test="$habitat_base/t"
    habitat_bin="$habitat_base/bin"
    habitat_extensions="$habitat_base/extensions"
    habitat_settings="$habitat_base/settings"

    # Specific Folders
    habitat_tmp="$habitat_storage/tmp"
    habitat_backup="$habitat_storage/backup"
    habitat_logs="$habitat_base/logs"
    habitat_configs="$habitat_settings/configs"

    # Specific Files
    habitat_log_file="$habitat_logs/habitat.log"
    habitat_config_file="$habitat_settings/habitat.cfg"
    habitat_settings_bin="$habitat_settings/bin"

    # For things to log to
    custom_log_file="$habitat_log"

    # The date
    habitat_start_seconds="$(date +%s)"
    habitat_start_date="$(date)"

}
function habitat_setup() {

    rm -rf "$habitat_tmp"/*
    log_header "Setup"
    log "Started at $habitat_start_date"

    # Assure that we have a good environment
    log_result unalias -a

    # Source the base theme for color definitions
    log_result source "$habitat_lib_base_theme"


    # Insure that we can run habitat again
    alias habitat="source $habitat_cli"
    log_result link_files "$habitat_cli" "$HOME/.bash_profile" "$habitat_backup"

    # Add to path with said helpful functions
    log_result pathadd "$habitat_lib"
    log_result pathadd "$habitat_settings_bin"

    local os="UNKNOWN"
    if is_installed "sw_vers" >/dev/null; then
        os="OSX $(sw_vers -productVersion)"
    elif is_installed 'lsb_release' >/dev/null; then
        os="$(lsb_release -a | grep 'Description' | sed -e 's/Description:\t//')"
    elif [ -f "/etc/*release*" ]; then
        os=$(cat /etc/*release*)
    elif [ -f "/etc/issue" ]; then
        os=$(cat /etc/issue)
    fi
    log "Found that operating system is $os"
    export OPERATING_SYSTEM="$os"
}

function habitat_dependancy_management() {
    log_header "Dependancy Management"
    local config="$1"
    local key
    for key in $(get_all_config "$config"); do
        local value="$(get_config "$key" "$config")"
        habitat_update_dependancy "$value"
    done
}

function habitat_update_dependancy() {
    local dir="$1"
    if [ -d "$dir/.svn" ]; then
        log "Async update for SVN"
        async_command "svn up $dir" "$habitat_log"
    fi
    if [ -d "$dir/.git" ]; then
        log "Async update for GIT"
        async_command "(cd $dir && git pull)" "$habitat_log"
    fi
}


function habitat_configuration() {
    log_header "Configuration"
    # going to have to loop through all 4+ configs here
    if [ "$(get_config "settings_repo" "$config")" = "ask" ]; then
        info "Where is your settings repo? (hit enter to use default)"
    fi

    if [ "$(get_config "bash_theme" "$config")" = "ask" ]; then
        info "Which bash theme do you want? (hit enter for default)"
    fi
    habitat_source_search+=("$habitat_lib_themes/default.sour")

    if [ "$(get_config "extensions" "$config")" = "ask" ]; then
        info "Do you want to use extensions? (hit enter for default)"
    fi

    if [ "$(get_config "update" "$config")" = "ask" ]; then
        info "How do you want to update: auto, ask, or never? (enter for auto)"
    fi

    # extension setup
    # extension config

}

function habitat_deployment() {
    log_header "Deployment"
    local search_dir
    local file_to_link
    local file_to_source
    for search_dir in "${habitat_symlink_search[@]}"; do
        for file_to_link in `find_this '*.syml' "$search_dir"`; do
            local dest="$HOME"/."$(basename "${file_to_link%.*}")"
            log "linking $file_to_link to $dest"
            link_files "$file_to_link" "$dest" "$habitat_backup"
        done
    done


    # Source global definitions
    if [ -f /etc/bashrc ]; then
        log "Sourced global definitions"
        source /etc/bashrc
    fi

    # Source local definitions
    if [ -f ~/.localrc ]; then
        log "Sourced local definitions"
        source ~/.localrc
    fi

    if [ -f "$bash_completion" ]; then
        source "$bash_completion"
        log "Sourced $bash_completion"
    fi
    # Source all .bash files into shell
    log "Sourcing User Settings:"
    for search_dir in "${habitat_source_search[@]}"; do
        for file_to_source in `find_this '*.sour' "$search_dir"`; do
            log "$file_to_source"
            source "$file_to_source"
        done
    done

    # extension deployment

}
function habitat_cleanup() {
    log_header "Cleanup"
    habitat_end_date="$(date)"
    habitat_end_seconds="$(date +%s)"
    log "Habitat all done at $habitat_end_date"
    log "All done after $(($habitat_end_seconds-$habitat_start_seconds))"

    unset "custom_log_file"
    unset "custom_backup_dir"
    # extension cleanup
    local habitat_var
    for habitat_var in $( ( set -o posix ; set ) | grep "habitat_" | sed -e "s~=.*$~~" ); do
        unset "$habitat_var"
    done

    local habitat_function
    for habitat_function in $(typeset -F | grep habitat_ | sed -e 's~declare -f ~~'); do
        unset -f "$habitat_function"
    done
}

function habitat_usage() {
    echo
    echo "    habitat <options>"
    echo
    echo "    h|help     show this help"
    echo "    i|install  install a dependancy to your environment"
    echo "    s|save     save/install a dependancy to your environment list"
    echo "    u|update   update your environment based your dependancies"
    echo "    d|debug    show debug output"
    echo
}

# Pre-Setup: #define section :)
habitat_pre_setup

# Grab Args
while [ "$#" -gt "0" ]; do
    arg="$1"; shift
    if regex_match "$arg" "^\-\-?(help)$"; then
        habitat_show_usage="0"
    elif regex_match "$arg" "^\-\-?(new-settings)$"; then
        habitat_new_settings="0"
    elif regex_match "$arg" "^\-\-?(example-settings)$"; then
        habitat_example_settings="0"
    elif regex_match "$arg" "^\-\-?(settings)$"; then
        habitat_user_settings="$1"; shift
    elif regex_match "$arg" "^\-\-?(install|add)$"; then
        habitat_install="$1"; shift
    elif regex_match "$arg" "^\-\-?(save)$"; then
        habitat_save_to_config="0"
    elif regex_match "$arg" "^\-\-?(update)$"; then
        habitat_update="0"
    elif regex_match "$arg" "^\-\-?(remove|uninstall)$"; then
        habitat_remove="$1"; shift
    else
        echo "Invalid arg $arg"
    fi
done

# Step 1: Setup
habitat_setup

# Step 2: Dependancy Management
habitat_dependancy_management

# Step 3: Configuration
habitat_configuration

# Step 4: Deployment
habitat_deployment

# Step 5: Cleanup
habitat_cleanup

return 0
