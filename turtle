#! /usr/bin/env sh

# Define Colors: Stolen From https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
#if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
#    export TERM="gnome-256color"
#elif infocmp xterm-256color >/dev/null 2>&1; then
#    export TERM="xterm-256color"
#fi

#RED="\e[0;31m"
#ORANGE="\033[1;33m"
#YELLOW="\e[0;33m"
#GREEN="\033[1;32m"
#BLUE=""
#LIGHT_BLUE=""
#PURPLE="\033[1;35m"
#PINK=""
#WHITE="\033[1;37m"
#GRAY=""
#GREY=""
#BLACK="\e[0;30m"
#BROWN=""
#CYAN="\e[0;36m"
## Extras
#BOLD=""
#RESET="\033[m"
#DIM=""
#
#if command -v 'tput' > /dev/null; then
#    if [ "$(tput colors)" -ge 256 ]; then
#        RED="$(tput setaf 196)"
#        ORANGE="$(tput setaf 202)"
#        YELLOW="$(tput setaf 226)"
#        GREEN="$(tput setaf 34)"
#        BLUE="$(tput setaf 21)"
#        LIGHT_BLUE="$(tput setaf 51)"
#        PURPLE="$(tput setaf 58)"
#        PINK="$(tput setaf 171)"
#        WHITE="$(tput setaf 255)"
#        GRAY="$(tput setaf 244)"
#        GREY="$(tput setaf 244)"
#        BLACK="$(tput setaf 256)"
#        BROWN="$(tput setaf 130)"
#        CYAN="$(tput setaf 39)"
#    else
#        RED="$(tput setaf 1)"
#        ORANGE=""
#        YELLOW="$(tput setaf 3)"
#        GREEN="$(tput setaf 2)"
#        BLUE="$(tput setaf 4)"
#        LIGHT_BLUE=""
#        PURPLE=""
#        PINK="$(tput setaf 5)"
#        WHITE="$(tput setaf 7)"
#        GRAY=""
#        GREY=""
#        BLACK="$(tput setaf 0)"
#        BROWN=""
#        CYAN="$(tput setaf 6)"
#    fi
#    BOLD="$(tput bold)"
#    RESET="$(tput sgr0)"
#    DIM="$(tput dim)"
#fi


function habitat_prep() {
    # Base Folders
    export habitat_base="$HOME/.habitat"
    export habitat_cli="$habitat_base/habitat"
    export habitat_storage="$habitat_base/storage"
    export habitat_test="$habitat_base/t"
    export habitat_bin="$habitat_base/bin"
    export habitat_extensions="$habitat_base/extensions"
    export habitat_settings="$habitat_base/settings"

    # Specific Folders
    export habitat_tmp="$habitat_storage/tmp"
    export habitat_backup="$habitat_storage/backup"
    export habitat_logs="$habitat_storage/logs"
    export habitat_configs="$habitat_settings/configs"

    # Specific Files
    export habitat_log_file="$habitat_logs/turtle.log"
    export habitat_config_file="$habitat_settings/turtle.cfg"
    export habitat_settings_bin="$habitat_settings/bin"

    # For things to log to
    export custom_log_file="$habitat_log_file"

    # The date
    export habitat_start_seconds="$(date +%s)"

    : > "$habitat_log_file"
    # Assure that we have a good environment
    "$habitat_bin"/log_header.sh "Prep"
    "$habitat_bin"/log_result.sh unalias -a

    alias habitat="source $habitat_cli"
    alias turtle="source $habitat_cli"
    "$habitat_bin"/log.sh "Added turtle and habitat alias"

    rm -rf "$habitat_tmp"/*
    "$habitat_bin"/log.sh "Cleaned $habitat_tmp"

    "$habitat_bin"/log_result.sh "$habitat_bin"/add_to_string.sh "$PATH" "$habitat_bin" ":"
    log_result.sh link_files.sh "$habitat_cli" "$HOME/.bash_profile" "$habitat_backup"
    local os="UNKNOWN"
    if is_installed.sh "sw_vers" >/dev/null; then
        os="OSX $(sw_vers -productVersion)"
    elif is_installed.sh 'lsb_release' >/dev/null; then
        os="$(lsb_release -a | grep 'Description' | sed -e 's/Description:\t//')"
    elif [ -f "/etc/*release*" ]; then
        os=$(cat /etc/*release*)
    elif [ -f "/etc/issue" ]; then
        os=$(cat /etc/issue)
    fi
    log.sh "Found that operating system is $os"
    export OPERATING_SYSTEM="$os"


}

function habitat_first_time_setup() {
    local settings=""
    if [ -n "$1" ]; then
        settings="$1"
    fi
    if [ ! -f "$habitat_config_file" ]; then
        local answer="$(user_choice.sh "Where is your settings repo?" 'example' 'new' '\w+/\w+' '(git|http)://')"
        if regex_match.sh "$answer" "^example$" "0"; then
            answer="brandonocasey/habitat-settings-example"
        fi
        if [ "$answer" = "new" ]; then
            : > "$habitat_config_file"
        else
            local settings="$answer"
        fi
        answer="$(user_choice.sh "Do you want updates?" 'y|yes' 'n|no')"
        local final_answer
        if regex_match.sh "$answer" "^y|yes$" "0"; then
            final_answer="$(user_choice.sh "How do you want updates?" 'auto' 'ask' 'inform' 'manual')"
        else
            final_answer="manual"
        fi
        set_config.sh "_habitat_update_type" "$final_answer" "$habitat_config_file"
    fi
}

function habitat_settings_update() {
echo "add"
}

function habitat_dependancies_update() {
echo "add"
}

function habitat_dependancy_management() {
    log_header.sh "Dependancy Management"
    # key = name, minus habitat on the front
    # value = repo url/repo name and version

    # update old
    async_command.sh update_repo.sh "$habitat_settings"

    # install new
    local key
    for key in $(get_all_config.sh "$habitat_config_file"); do
        if ! regex_match.sh "$key" "^_habitat"; then
            local value="$(get_config.sh "$key" "$config")"
            if [ ! -d "$habitat_extensions/$key" ]; then
                async_command.sh grab_repo.sh "$answer"
            else
                async_command.sh update_repo.sh "$habitat_extensions/$key"
            fi
        fi
    done
}




function habitat_cleanup() {
    log_header "Cleanup"


    # extension cleanup

    habitat_end_date="$(date)"
    habitat_end_seconds="$(date +%s)"
    log "Habitat all done at $habitat_end_date"
    log "All done after $(($habitat_end_seconds-$habitat_start_seconds))"

    unset "custom_log_file"
    unset "custom_backup_dir"

    local functions_to_unset=("$(typeset -F | grep "habitat_" | sed -e 's~declare -f ~~')")
    local vars_to_unset=("$( ( set -o posix ; set ) | grep "habitat_" | sed -e "s~=.*$~~" )")



    local key
    for key in $(get_all_config.sh "$habitat_config_file"); do
        if ! regex_match "$key" "_habitat"; then
            key="$(regex_replace "$key" "s~habitat-~~g")"
            key="$(regex_replace "$key" "s~-~_~g")"
            functions_to_unset+=("$(typeset -F | grep "$key" | sed -e 's~declare -f ~~')")
            vars_to_unset+=("$( ( set -o posix ; set ) | grep "$key" | sed -e "s~=.*$~~" )")
        fi
    done



    local var_to_unset
    for var_to_unset in "$vars_to_unset[@]"; do
        unset "$var_to_unset"
    done

    local function_to_unset
    for function_to_unset in "$functions_to_unset[@]"; do
        unset -f "$function_to_unset"
    done

}

function habitat_usage() {
    echo
    echo "    habitat <options>"
    echo
    echo "    h|help     show this help"
    echo "    i|install  install a dependancy to your environment"
    echo "    s|save     save/install a dependancy to your environment list"
    echo "    u|update   update your environment based your dependancies"
    echo "    d|debug    show debug output"
    echo
}

# Step #1: Prep/Grab Args

# Prep
habitat_prep

# Grab Args
while [ "$#" -gt "0" ]; do
    arg="$1"; shift
    if regex_match.sh "$arg" "^\-\-?(help)$"; then
        habitat_show_usage="0"
    elif regex_match.sh "$arg" "^\-\-?(new-settings)$"; then
        habitat_new_settings="0"
    elif regex_match.sh "$arg" "^\-\-?(example-settings)$"; then
        habitat_example_settings="0"
    elif regex_match.sh "$arg" "^\-\-?(settings)$"; then
        habitat_user_settings="$1"; shift
    elif regex_match.sh "$arg" "^\-\-?(install|add)$"; then
        habitat_install="$1"; shift
    elif regex_match.sh "$arg" "^\-\-?(save)$"; then
        habitat_save_to_config="0"
    elif regex_match.sh "$arg" "^\-\-?(update)$"; then
        habitat_update="0"
    elif regex_match.sh "$arg" "^\-\-?(remove|uninstall)$"; then
        habitat_remove="$1"; shift
    else
        echo "Invalid arg $arg"
    fi
done

# Step 2: Dependancy Management
#habitat_first_time_setup
habitat_dependancy_management

# Step 3: Configuration
#habitat_configuration

# Step 4: Deployment
#habitat_deployment

# Step 5: Cleanup
#habitat_cleanup

return 0
