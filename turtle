#! /usr/bin/env sh

# Make sure to escape these in PS* with \[${YELLOW}\] so that it does not get messed up
function habitat_define_colors() {
    # Define Colors
    local reset=""
    local bold=""
    local underline=""
    local black=""
    local red=""
    local green=""
    local yellow=""
    local blue=""
    local magenta=""
    local cyan=""
    local white=""

    if is_installed.sh "tput"; then
        local how_many_colors="`tput colors`"
        if [ -n "$how_many_colors" ] && [ "$how_many_colors"  -ge "8" ]; then
            reset="$(tput sgr0)"
            bold="$(tput bold)"
            underline="$(tput smul)"
            black="$(tput setaf 0)"
            red="$(tput setaf 1)"
            green="$(tput setaf 2)"
            yellow="$(tput setaf 3)"
            blue="$(tput setaf 4)"
            magenta="$(tput setaf 5)"
            cyan="$(tput setaf 6)"
            white="$(tput setaf 7)"
        fi
    fi

    export BOLD="$bold"
    export UNDERLINE="$underline"
    export RESET="$reset"
    export BLACK="$black"
    export RED="$red"
    export GREEN="$green"
    export YELLOW="$yellow"
    export BLUE="$blue"
    export MAGENTA="$magenta"
    export CYAN="$cyan"
    export WHITE="$white"

}

function habitat_prep() {
    # Base Folders
    export habitat_base="$HOME/.habitat"
    export habitat_cli="$habitat_base/turtle"
    export habitat_storage="$habitat_base/storage"
    export habitat_test="$habitat_base/t"
    export habitat_bin="$habitat_base/bin"
    export habitat_extensions="$habitat_base/extensions"
    export habitat_settings="$habitat_base/settings"

    # Specific Folders
    export habitat_tmp="$habitat_storage/tmp"
    export habitat_backup="$habitat_storage/backup"
    export habitat_logs="$habitat_storage/logs"
    export habitat_configs="$habitat_settings/configs"

    # Specific Files
    export habitat_log_file="$habitat_logs/turtle.log"
    export habitat_config_file="$habitat_settings/turtle.cfg"
    export habitat_settings_bin="$habitat_settings/bin"

    # For things to log to
    export custom_log_file="$habitat_log_file"

    # The date
    export habitat_start_seconds="$(date +%s)"


    : > "$habitat_log_file"
    # Assure that we have a good environment
    "$habitat_bin"/log_header.sh "Prep"
    "$habitat_bin"/log_result.sh unalias -a

    alias habitat="source $habitat_cli"
    alias turtle="source $habitat_cli"
    "$habitat_bin"/log.sh "Added turtle and habitat alias"

    rm -rf "$habitat_tmp"/*
    "$habitat_bin"/log.sh "Cleaned $habitat_tmp"

    export PATH=`"$habitat_bin"/add_to_string.sh "$PATH" "$habitat_bin" ":"`

    # Colors
    habitat_define_colors

    log_result.sh link_files.sh "$habitat_cli" "$HOME/.bash_profile" "$habitat_backup"
    local os="UNKNOWN"
    if is_installed.sh "sw_vers" >/dev/null; then
        os="OSX $(sw_vers -productVersion)"
    elif is_installed.sh 'lsb_release' >/dev/null; then
        os="$(lsb_release -a | grep 'Description' | sed -e 's/Description:\t//')"
    elif [ -f "/etc/*release*" ]; then
        os=$(cat /etc/*release*)
    elif [ -f "/etc/issue" ]; then
        os=$(cat /etc/issue)
    fi
    log.sh "Found that operating system is $os"
    export OPERATING_SYSTEM="$os"


}

function habitat_set_settings() {
    local settings="$1"; shift
    local repo_to_grab
    if [ -d "$habitat_settings" ]; then
        local result=`user_choice.sh "Are you sure you want to delete current settings?" "y|yes" "n|no"`
        if regex_match.sh "$result" "^n|no$"; then
            echo "Skipping as user answered $result"
            return
        else
            rm -rf "$habitat_settings"
        fi
    fi

    if regex_match.sh "$settings" "^example$" "0"; then
        repo_to_grab="brandonocasey/habitat-settings-example"
    elif regex_match.sh "$settings" "^new$" "0"; then
        : > "$habitat_config_file"
    else
        repo_to_grab="$settings"
    fi

    if [ -n "$grab_repo" ]; then
        echo "grabing $grab_repo for settings"
        grab_repo.sh "$grab_repo" "$habitat_base" "$habitat_settings"
    fi


}


function habitat_first_time_setup() {
    if [ ! -d "$habitat_settings" ]; then
        log_header.sh "First Time Setup"
        local settings="$(user_choice.sh "Where is your settings repo?" 'example' 'new' '.*/.*' '(git|http|https)://')"
        local grab_repo=""
        log.sh "The user said there settings are going to be: $settings"
        log.sh "`habitat_set_settings "$settings"`"
    fi
}

function habitat_update_and_install() {
    # key = name, minus habitat on the front
    # value = repo url/repo name and version
    # update existing

    # TODO: read requirements.cfg
    local repo_update_list=("$habitat_settings")
    local extension
    for extension in `habitat_get_current_extension_dirs`; do
        repo_update_list+=("$extension")
    done


    local update_dir
    for update_dir in "${repo_update_list[@]}"; do
        echo "Doing an async update for $update_dir"
        async_command.sh update_repo.sh "$update_dir"
    done


    # install new
    local key
    for key in $(get_all_config.sh "$habitat_config_file"); do
        if ! regex_match.sh "$key" "^_habitat"; then
            local value="$(get_config.sh "$key" "$habitat_config_file")"
            local repo_location="$habitat_extensions/$key"
            if [ ! -d "$repo_location" ]; then
                echo "Grabbing a new called $key with location $value"
                grab_repo.sh "$value" "$habitat_extensions"
            fi
        fi
    done

}
function habitat_dependancy_management() {
    habitat_first_time_setup
    log_header.sh "Dependancy Management"

    local config_setting="`get_config.sh "_habitat_update_type" "$habitat_config_file"`"
    if [ -z "$config_setting" ]; then
        local answer="$(user_choice.sh "Do you want updates?" 'y|yes' 'n|no')"
        if regex_match.sh "$answer" "^y|yes$" "0"; then
            answer="$(user_choice.sh "How do you want updates?" 'auto' 'ask' 'inform' 'manual')"
        else
            answer="manual"
        fi
        set_config.sh "_habitat_update_type" "$answer" "$habitat_config_file"
        habitat_dependancy_management
        return
    elif [ "$config_setting" = "manual" ]; then
        return
    elif [ "$config_setting" = "inform" ]; then
        echo "there are updates, please update"
        return
    elif [ "$config_setting" = "ask" ]; then
        local answer="`user_choice.sh "There are updates, do you want them?" "n|no" "y|yes"`"
        if regex_match.sh "$answer" "n|no"; then
            return
        fi
    fi

    log.sh "`habitat_update_and_install`"

}

# Extensions step
function habitat_get_current_extensions() {
    local dir
    for dir in "$habitat_extensions"/* ; do
        if [ -d "$dir" ]; then
            dir="$(regex_replace.sh "$dir" "s~$habitat_extensions/habitat\-~~g")"
            dir="$(regex_replace.sh "$dir" "s~-~_~g")"
            echo "$dir"
        fi
    done
}

function habitat_get_current_extension_dirs() {
    local dir
    for dir in "$habitat_extensions"/* ; do
        if [ -d "$dir" ]; then
            echo "$dir"
        fi
    done
}


function habitat_extensions() {
    log_header.sh "Extensions"
    local dir
    for dir in $(habitat_get_current_extension_dirs) ; do
        log.sh "Sourcing $dir/extension.habit"
        source "$dir/extension.habit"
    done

    log_header.sh "A - Setup"
    habitat_extension_action "setup"

    log_header.sh "B - Deploy"
    habitat_extension_action "deploy"

    log_header.sh "C - Cleanup"
    habitat_extension_action "cleanup"

}
function habitat_extension_action() {
    local action="$1"; shift
    local extension
    for extension in $(habitat_get_current_extensions); do
         if [ -n "$(type "${extension}_$action" 2>&1 | grep -i -E 'is a function')" ]; then
            log.sh "Running ${extension}_$action"
            "${extension}_$action"
        else
            log.sh "${extension}_$action was skipped as it does not exist"
        fi
    done
}

function habitat_get_functions() {
    local search="$1"; shift
    local all_functions="$(declare -F | sed -e 's~declare -f ~~g')"
    echo "$(echo "$all_functions" | grep -E "$search")"
}

habitat_get_vars() {
    local search="$1"; shift
    local all_variables="$( (set -o posix ; set) | sed -e 's~=.*~~')"
    echo "$(echo "$all_variables" | grep -E "$search")"
}

function habitat_usage() {
    echo
    echo "    habitat <options>"
    echo
    echo "    --help       show this help"
    echo "    --install    install a dependancy to your environment"
    echo "    --add        alias for install"
    echo "    --uninstall  uninstall a dependancy from your environment"
    echo "    --remove     alias for uninstall"
    echo "    --settings   Can be set to new, example, or a github repo"
    echo "    --save       save/install a dependancy to your environment list"
    echo "    --update     update/install extensions based on configs and whats installed"
    echo "    --stub       stub an extension name in the extensions directory"
    echo "    --verbose    show verbose output in the log"
    echo "    --debug      show debug output in the log"
    echo
}

function habitat_cleanup() {
    log_header.sh "Cleanup"

    local start_seconds="$habitat_start_seconds"

    log.sh "Cleaning up habitat_ variables and functions"

    local old_ifs="$IFS"
    IFS=$'\n'

    # Extension Cleanup
    local dir
    for dir in $(habitat_get_current_extensions); do
        log.sh "Cleaning up ${dir}_ vars and functions"
        local extension_var
        for extension_var in `habitat_get_vars "^${dir}_"`; do
            log.sh "Unsetting var $extension_var"
            unset "$extension_var"
        done

        local extension_function
        for extension_function in `habitat_get_functions "^${dir}_"`; do
            #log.sh "Unsetting function $extension_function"
            unset -f "$extension_function"
        done

    done


    log.sh "Cleaning up habitat_ vars and functions"
    local habitat_func
    for habitat_func in `habitat_get_functions "^habitat_"`; do
        #log.sh "Unsetting function $habitat_func"
        if [ "$habitat_func" != "habitat_get_vars" ] && [ "$habitat_func" != "habitat_cleanup" ]; then
            unset -f "$habitat_func"
        fi
    done

    local habitat_var
    for habitat_var in `habitat_get_vars "^habitat_"`; do
        #log.sh "Unsetting var $habitat_var"
        unset "$habitat_var"
    done

    IFS="$old_ifs"


    log.sh "Habitat all done at $(date)"
    log.sh "All done after $(($(date +%s)-$start_seconds))"

    unset "custom_log_file"
    unset -f "habitat_get_vars"
    unset -f "habitat_get_functions"
    unset -f "habitat_cleanup"
}


function habitat_install_extension() {
    local extension="$1"; shift


    # TODO: read requirements.cfg
    grab_repo.sh "$extension" "$habitat_extensions"
    local name="`regex_replace.sh "$extension" "s~^.*/~~"`"

    if [ -f "$habitat_extensions/$name/requiremens.cfg" ]; then
        echo "Call Self!"
    fi
    # save to config
    if [ -n "$1" ]; then
        set_config.sh "$name" "$extension" "$habitat_config_file"
    fi
}

function habitat_stub() {
    local extension_name="$1"; shift
    extension_name="`echo "$extension_name | sed -e 's~(_| )~-~'"`"
    local underscore_extension_name="`echo "$extension_name | sed -e 's~-~_~'"`"
    local extension_dir="$habitat_extensions/$extension_name"
    local extension_file="$extension_dir/etension.sh"
    mkdir "$extension_dir"
    touch "$extension_dir/turtle.cfg"
    echo "#! /bin/sh" > "$extension_file"
    echo "" >> "$extension_file"

    echo "${underscore_extension_name}_setup() {" >> "$extension_file"
    echo "    # insert setup here" >> "$extension_file"
    echo "    echo \"$extension_name Setup Stub!\"" >> "$extension_file"
    echo "}" >> "$extension_file"
    echo "" >> "$extension_file"

    echo "${underscore_extension_name}_deploy() {" >> "$extension_file"
    echo "    # insert deploy here" >> "$extension_file"
    echo "    echo \"$extension_name Deploy Stub!\"" >> "$extension_file"
    echo "}" >> "$extension_file"
    echo "" >> "$extension_file"

    echo "${underscore_extension_name}_cleanup() {" >> "$extension_file"
    echo "    # insert cleanup if you want to here" >> "$extension_file"
    echo "    echo \"Optional $extension_name Cleanup Stub!\"" >> "$extension_file"
    echo "}" >> "$extension_file"
    echo "" >> "$extension_file"
}
function habitat_remove_extension() {
    local extension="$1"; shift

    if [ -d  "$habitat_extensions/$extension" ]; then
        rm -rf "$habitat_extensions/$extension"
        # remove from config
        if [ -n "$1" ]; then
            rm_config.sh "$extension" "$habitat_config_file"
        fi
    fi
}



# Step #1: Prep/Grab Args
habitat_prep

# Grab Args
while [ "$#" -gt "0" ]; do
    arg="$1"; shift
    if regex_match.sh "$arg" "^\-\-?(help)$"; then
        habitat_show_usage="0"
    elif regex_match.sh "$arg" "^\-\-?(stub)$"; then
        habitat_extension_stub="$1"
    elif regex_match.sh "$arg" "^\-\-?(settings)$"; then
        habitat_settings_choice="$1"; shift
    elif regex_match.sh "$arg" "^\-\-?(install|add)$"; then
        habitat_extension_add="$1"; shift
    elif regex_match.sh "$arg" "^\-\-?(save)$"; then
        habitat_save_to_config="0"
    elif regex_match.sh "$arg" "^\-\-?(update)$"; then
        habitat_update_extensions="0"
    elif regex_match.sh "$arg" "^\-\-?(remove|uninstall)$"; then
        habitat_extension_remove="$1"; shift
    else
        echo "Invalid arg $arg"
    fi
done

if [ -n "$habitat_show_usage" ]; then
    habitat_usage
elif [ -n "$habitat_extension_add" ]; then
    habitat_install_extension "$habitat_extension_add" "$habitat_save_to_config"
elif [ -n "$habitat_extension_remove" ]; then
    habitat_remove_extension "$habitat_extension_remove" "$habitat_save_to_config"
elif [ -n "$habitat_update_extensions" ]; then
    habitat_update_and_install
elif [ -n "$habitat_settings_choice" ]; then
    habitat_set_settings "$habitat_settings_choice"
elif [ -n "$habitat_extension_stub" ]; then
    habitat_stub "$habitat_extension_stub"
else
    # Step 2: Dependancy Management
    habitat_dependancy_management

    # Step 3: Extensions
    habitat_extensions
fi
# Step 4: Cleanup
habitat_cleanup

return 0
